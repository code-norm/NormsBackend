package notif

// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

import (
	"bytes"
	"database/sql"
	"encoding/json"
	"net/http"

	cL "github.com/jjmarsha/NormsBackend/pkg/classes"
)

type Payload struct {
	To               string `json:"to"`
	Badge            int    `json:"badge"`
	Title            string `json:"title"`
	Body             string `json:"body"`
	ExperienceID     string `json:"experienceId"`
	Category         string `json:"_category"`
	ContentAvailable bool   `json:"_contentAvailable"`
}

func NotifHandler(db *sql.DB, u *cL.User) http.HandlerFunc {
	fn := func(w http.ResponseWriter, r *http.Request) {
		data := Payload{
			To:               "ExponentPushToken[9UQs5SDdw--zIpwg6hRok8]",
			Badge:            0,
			Title:            "Fatigue Check",
			Body:             "Feeling more tired than last time?",
			ExperienceID:     "@dnguyen1289/code-norm",
			Category:         "@dnguyen1289/code-norm:rate",
			ContentAvailable: true,
		}
		payloadBytes, err := json.Marshal(data)
		if err != nil {
			// handle err
		}
		body := bytes.NewReader(payloadBytes)
		req, err := http.NewRequest("POST", "https://exp.host/--/api/v2/push/send", body)
		if err != nil {
			// handle err
		}

		req.Header.Set("Content-Type", "application/json")

		resp, err := http.DefaultClient.Do(req)
		if err != nil {
			// handle err
		}
		defer resp.Body.Close()
	}
	return http.HandlerFunc(fn)
}

// func doEvery(d time.Duration, f func(time.Time)) {
// 	for x := range time.Tick(d) {

// 	}
// }
